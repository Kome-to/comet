input CreateChannelInput {
  id: ID
  name: String!
  isPrivate: Boolean!
  publicKey: String!
}

input CreateMemberInput {
  userId: String!
  channelId: String!
  role: String!
  eChannelKey: String!
}

input CreateWorkspaceInput {
  name: String!

  channels: [CreateChannelInput]!
  members: [CreateMemberInput]!
}

type Workspace {
  id: ID!
  userId: String!
  name: String!

  channels: [Channel]

  createdAt: String!
  updatedAt: String!
}

type Member {
  id: ID!
  channelId: String!
  userId: String!
  role: String!
  eChannelKey: String!

  user: User
}

type User {
  id: ID!
  publicKey: String!
  firstName: String!
  lastName: String!
  email: String!
  isActive: Boolean!

  createdAt: String!
  updatedAt: String!
}

type Channel {
  id: ID!
  workspaceId: String!
  name: String!
  isPrivate: Boolean!
  publicKey: String!

  members: [Member]

  createdAt: String!
  updatedAt: String!
}

type Chat {
  id: ID!
  userId: String!
  channelId: String!
  content: String
  parentId: String
  totalReplies: Int!
  eSessionKey: String!

  createdAt: String!
  updatedAt: String!
}

type Query {
  chats: [Chat]!
}

type Mutation {
  createWorkspace(input: CreateWorkspaceInput): Workspace
}

type Subscription {
  books: [Chat]
}
